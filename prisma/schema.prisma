// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Vacancy {
  id              String        @id @default(uuid())
  IDNO            String        @unique
  title           String
  position        String
  vacancyType     String
  employementType String
  interview       String
  gender          Sex
  location        String
  sector          String
  experience      String
  deadline        DateTime
  vacancyNo       Int
  salary          Int
  description     String
  status          VacancyStatus @default(Open)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([position, deadline, gender, vacancyType, employementType])
}

model Interview {
  id        String          @id @default(uuid())
  IDNO      String          @unique
  title     String
  questions Question[]
  status    InterviewStatus @default(Active)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

// Question model
model Question {
  id          String    @id @default(uuid())
  name        String
  minValue    Int
  maxValue    Int
  interview   Interview @relation(fields: [interviewId], references: [id])
  interviewId String
}

model Branch {
  id         String       @id @default(uuid())
  IDNO       String       @unique
  name       String
  city       String
  subCity    String
  wereda     String
  Department Department[]
  status     OrgStatus    @default(Active)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Department {
  id        String     @id @default(uuid())
  IDNO      String     @unique
  name      String
  branch    Branch     @relation(fields: [branchId], references: [id])
  branchId  String
  positions Position[]
  status    OrgStatus  @default(Active)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Position {
  id                 String               @id @default(uuid())
  IDNO               String               @unique
  name               String
  department         Department           @relation(fields: [departmentId], references: [id])
  departmentId       String
  status             OrgStatus            @default(Active)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  EmployeeWorkDetail EmployeeWorkDetail[]
}

model Employee {
  id          String               @id @default(uuid())
  IDNO        String               @unique
  fName       String
  mName       String
  lName       String
  dateOfBirth DateTime
  nationality String
  sex         EmployeeSex
  status      EmployeeStatus       @default(Active)
  Profile     EmployeeProfile?
  address     EmployeeAddress?
  contact     EmployeeContact?
  relatedInfo EmployeeRelatedInfo?
  workDetail  EmployeeWorkDetail?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model EmployeeProfile {
  id         String   @id @default(uuid())
  profile    String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique
  IDFront    String
  IDBack     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmployeeAddress {
  id         String   @id @default(uuid())
  city       String
  subCity    String
  wereda     String
  houseNo    String
  kebele     String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmployeeContact {
  id         String   @id @default(uuid())
  phone      String
  email      String?
  otherPhone String?
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmployeeWorkDetail {
  id              String   @id @default(uuid())
  employementType String
  shift           String
  salary          String?
  startDate       String
  agreement       String
  bankName        String?
  bankAccount     String?
  TIN             String?
  position        Position @relation(fields: [positionId], references: [id])
  positionId      String
  employee        Employee @relation(fields: [employeeId], references: [id])
  employeeId      String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model EmployeeRelatedInfo {
  id                String   @id @default(uuid())
  maritalStatus     String?
  religion          String?
  ethnicGroup       String?
  bloodGroup        String?
  medicalReport     String
  fingerPrintReport String
  employee          Employee @relation(fields: [employeeId], references: [id])
  employeeId        String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Sex {
  Male
  Female
  Both
}

enum EmployeeSex {
  Male
  Female
}

enum VacancyStatus {
  Open
  Closed
}

enum InterviewStatus {
  Active
  InActive
}

enum OrgStatus {
  Active
  InActive
}

enum EmployeeStatus {
  Active
  InActive
  Terminated
}
