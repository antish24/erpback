// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Vacancy {
  id              String        @id @default(uuid())
  IDNO            String        @unique
  title           String
  position        String
  vacancyType     String
  employementType String
  interview       Interview     @relation(fields: [interviewId], references: [id])
  interviewId     String
  gender          Sex
  location        String
  sector          String
  experience      String
  deadline        DateTime
  vacancyNo       Int
  salary          Int
  description     String
  applicant       Applicant[]
  status          VacancyStatus @default(Open)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([position, deadline, gender, vacancyType, employementType])
}

model Applicant {
  id         String               @id @default(uuid())
  IDNO       String               @unique
  employee   Employee             @relation(fields: [employeeId], references: [id])
  employeeId String
  vacancy    Vacancy              @relation(fields: [vacancyId], references: [id])
  vacancyId  String
  questions  ApplicantInterview[]
  totalScore Int                  @default(0)
  maxScore   Int                  @default(0)
  status     ApplicantStatus      @default(Pending)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt

  @@unique([employeeId, vacancyId])
}

model Interview {
  id        String          @id @default(uuid())
  IDNO      String          @unique
  title     String
  questions Question[]
  vacancy   Vacancy[]
  status    InterviewStatus @default(Active)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ApplicantInterview {
  id          String    @id @default(uuid())
  questions   String
  score       Int
  min         Int
  max         Int
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Question model
model Question {
  id          String    @id @default(uuid())
  name        String
  minValue    Int
  maxValue    Int
  interview   Interview @relation(fields: [interviewId], references: [id])
  interviewId String
}

model Branch {
  id         String       @id @default(uuid())
  IDNO       String       @unique
  name       String
  city       String
  subCity    String
  wereda     String
  Department Department[]
  status     OrgStatus    @default(Active)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Department {
  id        String     @id @default(uuid())
  IDNO      String     @unique
  name      String
  branch    Branch     @relation(fields: [branchId], references: [id])
  branchId  String
  positions Position[]
  status    OrgStatus  @default(Active)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Position {
  id                 String               @id @default(uuid())
  IDNO               String               @unique
  name               String
  department         Department           @relation(fields: [departmentId], references: [id])
  departmentId       String
  status             OrgStatus            @default(Active)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  EmployeeWorkDetail EmployeeWorkDetail[]
}

model Employee {
  id                    String                         @id @default(uuid())
  IDNO                  String                         @unique
  fName                 String
  mName                 String
  lName                 String?
  dateOfBirth           DateTime
  nationality           String
  applicant             Applicant[]
  sex                   EmployeeSex
  status                EmployeeStatus                 @default(Active)
  Profile               EmployeeProfile?
  address               EmployeeAddress?
  contact               EmployeeContact?
  relatedInfo           EmployeeRelatedInfo?
  educationalBackground EmployeeEducationalBackground?
  workDetail            EmployeeWorkDetail?
  leaveBalance          LeaveBalance?
  leaveApplication      LeaveApplication[]
  workHistory           EmployeeWorkHistory?
  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt

  @@unique([fName, lName, mName, dateOfBirth])
}

model EmployeeProfile {
  id         String   @id @default(uuid())
  profile    String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique
  IDFront    String
  IDBack     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmployeeAddress {
  id         String   @id @default(uuid())
  city       String
  subCity    String
  wereda     String
  houseNo    String
  kebele     String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmployeeContact {
  id         String   @id @default(uuid())
  phone      String
  email      String?
  otherPhone String?
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmployeeWorkDetail {
  id                      String                   @id @default(uuid())
  employementType         String
  shift                   String
  salary                  String
  startDate               String
  agreement               String
  bankName                String?
  bankAccount             String?
  TIN                     String?
  position                Position                 @relation(fields: [positionId], references: [id])
  positionId              String
  employee                Employee                 @relation(fields: [employeeId], references: [id])
  employeeId              String                   @unique
  Project                 EmployeeProject[]
  employeeSalaryStructure EmployeeSalaryStructure?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model EmployeeRelatedInfo {
  id                       String   @id @default(uuid())
  maritalStatus            String?
  religion                 String?
  ethnicGroup              String?
  bloodGroup               String?
  familyBg                 String?
  medicalReport            String
  fingerPrintReport        String
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  employee                 Employee @relation(fields: [employeeId], references: [id])
  employeeId               String   @unique
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model EmployeeEducationalBackground {
  id            String   @id @default(uuid())
  institution   String
  qualification String
  attachment    String
  startDate     DateTime
  endDate       DateTime
  employee      Employee @relation(fields: [employeeId], references: [id])
  employeeId    String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EmployeeWorkHistory {
  id         String   @id @default(uuid())
  position   String
  branch     String
  department String
  startDate  DateTime
  endDate    DateTime
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LeaveType {
  id               String             @id @default(uuid())
  name             String
  maxLeaveDate     Int
  applicableAfter  Int
  repeat           Int
  withPay          LeaveTypeStatus
  leaveApplication LeaveApplication[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model LeaveApplication {
  id          String                 @id @default(uuid())
  employee    Employee               @relation(fields: [employeeId], references: [id])
  employeeId  String
  leaveType   LeaveType              @relation(fields: [leaveTypeId], references: [id])
  leaveTypeId String
  startDate   DateTime
  endDate     DateTime
  totalDay    Int
  reason      String
  status      LeaveApplicationStatus @default(Pending)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model Holiday {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  totalDay  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveBalance {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique
  used       Int      @default(0)
  balance    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TimeSheet {
  id                String          @id @default(uuid())
  employeeProject   EmployeeProject @relation(fields: [employeeProjectId], references: [id])
  employeeProjectId String
  regularPH         Int
  regularPOTH       Int
  specialPH         Int
  OT32              Int
  totalHours        Int
  day               Int
  month             Int
  year              Int
  status            TimeSheetStatus @default(Pending)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([employeeProjectId, day, year, month])
}

model Company {
  id             String          @id @default(uuid())
  name           String          @unique
  phone          String
  email          String          @unique
  profile        String
  VAT            String          @unique
  TIN            String          @unique
  license        String
  status         CompanyStatus   @default(Pending)
  companyAddress CompanyAddress?
  projects       Project[]
  projectplan    ProjectPlan[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model CompanyAddress {
  id        String  @id @default(uuid())
  city      String
  subCity   String
  wereda    String
  kebele    String
  houseNo   String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @unique
}

model ProjectPlan {
  id          String            @id @default(uuid())
  company     Company           @relation(fields: [companyId], references: [id])
  companyId   String
  site        String            @unique
  noSecurity  Int
  price       Int
  attachments String
  status      ProjectPlanStatus @default(Pending)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Project {
  id          String            @id @default(uuid())
  company     Company           @relation(fields: [companyId], references: [id])
  companyId   String
  site        String            @unique
  noSecurity  Int
  startDate   DateTime
  endDate     DateTime
  price       Int
  attachments String
  employees   EmployeeProject[]
  status      ProjectStatus     @default(Pending)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model EmployeeProject {
  id           String                @id @default(uuid())
  workDetail   EmployeeWorkDetail    @relation(fields: [workDetailId], references: [id])
  workDetailId String
  role         String
  project      Project               @relation(fields: [projectId], references: [id])
  projectId    String
  timeSheet    TimeSheet[]
  status       EmployeeProjectStatus @default(Active)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@unique([workDetailId, projectId])
}

model SalaryComponent {
  id              String                       @id @default(uuid())
  name            String                       @unique
  type            SalaryComponentType
  pension         PensionType                  @default(No)
  tax             TaxType                      @default(No)
  semiTaxType     SemiTaxType                  @default(None)
  minNonTaxable   Int                          @default(0)
  applicableAfter Int                          @default(1)
  conditionType   SalaryComponentConditionType
  salaryStructure SalaryStructure[]
  status          SalaryComponentStatus        @default(Active)
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
}

model SalaryStructure {
  id                    String              @id @default(uuid())
  salaryStructureForm   SalaryStructureForm @relation(fields: [salaryStructureFormId], references: [id])
  salaryStructureFormId String
  salaryComponent       SalaryComponent     @relation(fields: [salaryComponentId], references: [id])
  salaryComponentId     String
  amount                Int
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model SalaryStructureForm {
  id              String                    @id @default(uuid())
  name            String                    @unique
  salaryStructure SalaryStructure[]
  employee        EmployeeSalaryStructure[]
  status          SalaryComponentStatus     @default(Active)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model EmployeeSalaryStructure {
  id                    String                @id @default(uuid())
  salaryStructureForm   SalaryStructureForm   @relation(fields: [salaryStructureFormId], references: [id])
  salaryStructureFormId String
  employeeWorkDetail    EmployeeWorkDetail    @relation(fields: [employeeWorkDetailId], references: [id])
  employeeWorkDetailId  String                @unique
  status                SalaryComponentStatus @default(Active)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

//hiiiiiiiiiiiii

// model Company {
//   id        Int      @id @default(autoincrement())
//   name      String   @db.VarChar(255)
//   location  String   @db.VarChar(255)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("companies") // Explicitly map the model to a table named 'companies'
// }

// model Project {
//   id          Int                @id @default(autoincrement())
//   name        String
//   company     String
//   location    String
//   noSecurity  String
//   attachments String             // This is a placeholder for file storage path or URL
//   createdAt   DateTime            @default(now())
//   updatedAt   DateTime            @updatedAt
//   employees   ProjectEmployee[]   // Relationship to ProjectEmployee join table
// }

// model ProjectEmployee {
//   projectId   Int
//   employeeId  Int
//   assignedAt  DateTime            @default(now())
//   status      String   @default("Active") // Add the status field with default value
//   role        String   @default("null")
//   project     Project  @relation(fields: [projectId], references: [id])
//   employee    Employee @relation(fields: [employeeId], references: [id])

//   @@id([projectId, employeeId])   // Composite key for many-to-many relationship
// }

//end

enum TimeSheetStatus {
  Pending
  Approved
  Failed
}

enum PensionType {
  Yes
  No
}

enum TaxType {
  Yes
  Semi
  No
}

enum SalaryComponentConditionType {
  Add
  Deduct
  Pension
  IncomeTax
}

enum SemiTaxType {
  Fixed
  Percent
  None
}

enum ProjectStatus {
  Pending
  Active
  Terminated
}

enum ProjectPlanStatus {
  Approved
  Failed
  Pending
}

enum EmployeeProjectStatus {
  InActive
  Active
  Terminated
}

enum SalaryComponentStatus {
  InActive
  Active
}

enum SalaryComponentType {
  Earning
  Deduction
}

enum Sex {
  Male
  Female
  Both
}

enum CompanyStatus {
  Active
  InActive
  Pending
}

enum EmployeeSex {
  Male
  Female
}

enum VacancyStatus {
  Open
  Closed
}

enum InterviewStatus {
  Active
  InActive
}

enum OrgStatus {
  Active
  InActive
}

enum LeaveTypeStatus {
  Yes
  No
  Other
}

enum LeaveApplicationStatus {
  Approved
  Failed
  Pending
}

enum EmployeeStatus {
  Active
  InActive
  Terminated
  Pending
}

enum ApplicantStatus {
  Pending
  Hired
  Fail
  Waiting
}
